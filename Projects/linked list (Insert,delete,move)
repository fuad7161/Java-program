package org.meicode.hello;

import java.util.Scanner;

class node{
    int data;
    node next;
    public static node create_node(int val){
        node n1 = new node();
        n1.data = val;
        n1.next = null;
        return  n1;
    }
}


public class A{
    public static void main(String[] args){
        node head = new node();
        head.data = 0;
        head.next = null;
        Scanner input = new Scanner(System.in);
        while(true){
            System.out.println("1. Insert from anywhere.");
            System.out.println("2. Delete from anywhere.");
            System.out.println("3. Move from anywhere.");
            System.out.println("4. Show list");
            System.out.println("5. exit");
            int task = input.nextInt();
            if(task == 1){
                while(true){
                    System.out.println("Where you want to Intert a node?");
                    System.out.println("1. Add node in the last.");
                    System.out.println("2. Add node in the front.");
                    System.out.println("3. Add node in any position.");
                    System.out.println("4. exit");
                    int inset_in = input.nextInt();
                    if(inset_in == 1){
                        System.out.println("Give me a value.");
                        int val = input.nextInt();
                        add_back(head, val);
                    }else if(inset_in == 2){
                        System.out.println("Give me a value.");
                        int val = input.nextInt();
                        head = add_front(head, val);
                    }else if(inset_in == 3){
                        show(head);
                        System.out.println("give me a position where you want to insert.");
                        int pos = input.nextInt();
                        System.out.println("give me value.");
                        int val = input.nextInt();
                        add_pos(head, pos, val);
                    }else {
                        break;
                    }
                }
            }else if (task == 2){
                while(true){
                    System.out.println("From where you want to delete a node.");
                    System.out.println("1. Front of the list.");
                    System.out.println("2. From back of the list.");
                    System.out.println("3. From any position of the list.");
                    System.out.println("4. Exit");
                    int operation = input.nextInt();
                    if(operation == 1){
                        System.out.println("Here is the list after deleting first element.");
                        head.next = delete_first(head);
                        show(head);
                    }else if(operation == 2){
                        System.out.println("Here is the list after deleting last element.");
                        delete_last(head);
                        show(head);
                    }else if(operation == 3){
                        show(head);
                        System.out.println("give me the position that you want to delete.");
                        int pos = input.nextInt();
                        delete_pos(head, pos);
                        show(head);
                    }else {
                        break;
                    }
                }
            }else if(task == 3){
                while(true){
                    System.out.println("1. swap two element.");
                    System.out.println("2. exit");
                    int t = input.nextInt();
                    if(t == 1){
                        show(head);
                        System.out.println("give me 2 position you want to swap.");
                        int x = input.nextInt();
                        int y = input.nextInt();
                        node tem1 = get_node(head,x);
                        node tem2 = get_node(head,y);
                        int tem3 = tem1.data;
                        tem1.data = tem2.data;
                        tem2.data = tem3;
                        System.out.println("after swaping node "+x+" "+y);
                        show(head);
                    }else break;
                }
            }else if(task == 4){
                show(head);
            }else {
                break;
            }
        }
    }
    //pos find
    private static node get_node(node head,int pos){
        node tem = head;
        while(pos>0){
            pos--;
            tem = tem.next;
        }
        return tem;
    }
    //delete
    private static node delete_first(node head){
        return  head.next.next;
    }
    private static void delete_last(node head){
        node tem = head;
        if(tem.next == null){
            tem = null;
            return;
        }
        while(tem.next.next != null){
            tem = tem.next;
        }
        tem.next = null;

    }
    private static void delete_pos(node head, int pos){
        pos -= 1;
        node tem = head;
        while(pos > 0){
            pos--;
            tem = tem.next;
        }
        System.out.println(tem.data);
        tem.next = tem.next.next;
    }
    //add
    private static void add_pos(node head, int pos, int val){
        node tem = head;
        pos -= 1;
        while(pos>0){
            pos--;
            tem = tem.next;
        }
        node n1 = node.create_node(val);
        node tem1 = tem.next;
        tem.next = n1;
        n1.next = tem1;
    }
    private static node add_front(node head , int val){
        node n1 = node.create_node(val);
        n1.next = head.next;
        head.next = n1;
        return head;
    }
    private static void add_back(node head, int val) {
        node tem = head;
        while(tem.next != null){
            tem = tem.next;
        }
        node n1 = node.create_node(val);
        tem.next = n1;
    }
    //show list
    private static void show_list(node head){
        System.out.print(head.data+" ");
        if(head.next == null){
            System.out.println();
            return;
        }
        show_list(head.next);
    }
    private static void show(node head){
        if(ck_list(head.next)) {
            show_list(head.next);
        }else {
            System.out.println("list empty. you should insert something.");
        }
    }
    private static boolean ck_list(node head){
        return head != null;
    }
}
